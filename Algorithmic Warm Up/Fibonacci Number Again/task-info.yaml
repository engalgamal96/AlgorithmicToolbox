type: edu
files:
- name: fibonacci_number_again_unit_tests.py
  visible: true
  placeholders:
  - offset: 456
    length: 22
    placeholder_text: type here
    initial_state:
      length: 22
      offset: 456
    initialized_from_dependency: false
    selected: true
    status: Unchecked
  text: |
    import unittest
    from itertools import product
    from fibonacci_number_again import fibonacci_number_again, fibonacci_number_again_naive


    class TestFibonacciNumberAgain(unittest.TestCase):
        def test_small(self):
            for n, m in product(range(2, 15), repeat=2):
                self.assertEqual(fibonacci_number_again(n, m), fibonacci_number_again_naive(n, m))

        def test_large(self):
            for (n, m, r) in [(115, 1000, 885), (2816213588, 239, 151), type here]:
                self.assertEqual(fibonacci_number_again(n, m), r)


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
- name: fin.py
  visible: true
  learner_created: true
- name: fibonacci_number_again.py
  visible: true
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/b66y2/programming-assignment-1-introduction/discussions
status: Unchecked
feedback:
  message: <html>Local tests passed, please <a href="https://www.coursera.org/learn/algorithmic-toolbox/programming/b66y2/programming-assignment-1-introduction/submission">submit
    to Coursera</a></html>
  time: Sun, 03 Jan 2021 08:36:29 UTC
record: -1
